// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
}

model User {
  id              String        @id @default(cuid())
  forename        String
  surname         String
  email           String        @unique
  emailVerified   DateTime?
  image           String?
  password        String?       @default("OAUTH")
  mobile          String        @unique
  mobileVerified  DateTime?
  role            Role          @default(STUDENT)
  biography       String?
  accounts        Account[]
  sessions        Session[]
  calls           Call[]        @relation("StudentRelation")
  instructedCalls Call[]        @relation("InstructorRelation")
  callRequests    CallRequest[] @relation("InstructorRelation")
  requestedCalls  CallRequest[] @relation("StudentRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Call {
  callId       String   @id @default(cuid())
  userId       String
  instructorId String
  description  String   @default("No description")
  date         DateTime
  instructor   User     @relation("InstructorRelation", fields: [instructorId], references: [id], onDelete: Cascade)
  student      User     @relation("StudentRelation", fields: [userId], references: [id], onDelete: Cascade)
}

model CallRequest {
  callRequestId String   @id @default(cuid())
  userId        String
  instructorId  String
  details       String   @default("No details provided")
  date1         DateTime
  date2         DateTime
  date3         DateTime
  instructor    User     @relation("InstructorRelation", fields: [instructorId], references: [id], onDelete: Cascade)
  student       User     @relation("StudentRelation", fields: [userId], references: [id], onDelete: Cascade)
}
